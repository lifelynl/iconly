import fs from 'fs';
import path from 'path';
import SVGO from 'svgo';
export class IconlyGenerator {
  constructor(config) {
    if (!process.argv[2] || !process.argv[3]) {
      logger('ERROR: Please supply input- -AND- output- directory as arguments', true);
      logger('ts-node iconly-generator.ts [inputDir] [outputDir]', true);
      process.exit(1);
    }

    this.counter = 0;
    this.config = config;

    if (this.config.createIconComponents) {
      logger('ERROR: Creation of Icon components is not supported yet', true);
      process.exit(1);
    }

    this.svgo = new SVGO({
      plugins: [{
        cleanupAttrs: true
      }, {
        removeDoctype: true
      }, {
        removeXMLProcInst: true
      }, {
        removeComments: true
      }, {
        removeMetadata: true
      }, {
        removeXMLNS: true
      }, {
        removeTitle: true
      }, {
        removeDesc: true
      }, {
        removeUselessDefs: true
      }, {
        removeEditorsNSData: true
      }, {
        removeEmptyAttrs: true
      }, {
        removeHiddenElems: true
      }, {
        removeEmptyText: true
      }, {
        removeEmptyContainers: true
      }, {
        removeViewBox: false
      }, {
        cleanupEnableBackground: true
      }, {
        convertStyleToAttrs: true
      }, {
        convertColors: true
      }, {
        convertPathData: true
      }, {
        convertTransform: true
      }, {
        removeUnknownsAndDefaults: true
      }, {
        removeNonInheritableGroupAttrs: true
      }, {
        removeUselessStrokeAndFill: true
      }, {
        removeUnusedNS: true
      }, {
        cleanupIDs: true
      }, {
        cleanupNumericValues: true
      }, {
        moveElemsAttrsToGroup: true
      }, {
        moveGroupAttrsToElems: true
      }, {
        collapseGroups: true
      }, {
        removeRasterImages: false
      }, {
        mergePaths: true
      }, {
        convertShapeToPath: true
      }, {
        sortAttrs: true
      }, {
        removeDimensions: true
      }, {
        removeAttrs: {
          attrs: '(stroke|fill)'
        }
      }]
    });
    this.run();
  }

  async run() {
    const {
      sourceDir,
      destDir,
      outputFilename,
      beautifyJson
    } = this.config;

    if (!fs.existsSync(destDir)) {
      fs.mkdirSync(destDir);
    }

    fs.writeFileSync(path.join(`${destDir}/${outputFilename ? outputFilename : 'iconlyData'}.json`), JSON.stringify((await this.scanDir(sourceDir)), null, beautifyJson ? 4 : 0));
    logger(`Iconly Generator exported ${this.counter} SVG's into [${this.config.destDir}/${this.config.outputFilename ? this.config.outputFilename : 'iconlyData'}.json]`);
  }

  async scanDir(dir) {
    const iconsData = {};
    const dirContent = fs.readdirSync(path.resolve(dir));

    for (const entry of dirContent) {
      const entryPath = `${dir}/${entry}`;
      const parsingArray = entry.split('_');
      const entryName = this.clean(parsingArray[0].toLowerCase());
      const isDir = fs.lstatSync(entryPath).isDirectory();

      if (isDir) {
        const iconData = await this.scanDir(entryPath);

        if (!iconData) {
          logger(`Couldn't get data for ${entryPath}`);
          return process.exit(1);
        }

        iconsData[`${entryName}Group`] = iconData;
      } else if (path.extname(entry) === '.svg') {
        const svgData = await this.optimizeSVG(fs.readFileSync(entryPath, 'utf8'));

        if (!iconsData[entryName]) {
          iconsData[entryName] = {
            name: entryName,
            svgs: [{
              sourcePath: entryPath,
              size: this.getViewboxSize(svgData),
              fileData: svgData
            }]
          };
          this.counter++;
        } else {
          try {
            const iconData = iconsData[entryName];

            if (!iconData || !iconData.svgs) {
              throw new Error('Unexpected empty data');
            }

            iconData.svgs.push({
              sourcePath: entryPath,
              size: this.getViewboxSize(svgData),
              fileData: svgData
            });
            this.counter++;
          } catch (err) {
            throw new Error(err);
          }
        }
      }
    }

    return iconsData;
  }

  clean(path) {
    return path.replace(this.config.sourceDir, '').replace(new RegExp('/', 'g'), '').replace(new RegExp(' ', 'g'), '-').replace('.svg', '');
  }

  async optimizeSVG(svgData) {
    const optimized = await this.svgo.optimize(svgData);
    return optimized.data;
  }

  getViewboxSize(svgData) {
    const viewboxData = svgData.split('viewBox="')[1].split('"')[0].split(' ');
    const width = viewboxData[2];
    const height = viewboxData[3];
    return [parseInt(width, 10), parseInt(height, 10)];
  }

}

function logger(text, isError) {
  if (isError) {
    // eslint-disable-next-line no-console
    console.error(text);
    return;
  }

  if (process.argv[4] === '-v') {
    // eslint-disable-next-line no-console
    console.log(text);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmF0b3IudHMiXSwibmFtZXMiOlsiZnMiLCJwYXRoIiwiU1ZHTyIsIkljb25seUdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwicHJvY2VzcyIsImFyZ3YiLCJsb2dnZXIiLCJleGl0IiwiY291bnRlciIsImNyZWF0ZUljb25Db21wb25lbnRzIiwic3ZnbyIsInBsdWdpbnMiLCJjbGVhbnVwQXR0cnMiLCJyZW1vdmVEb2N0eXBlIiwicmVtb3ZlWE1MUHJvY0luc3QiLCJyZW1vdmVDb21tZW50cyIsInJlbW92ZU1ldGFkYXRhIiwicmVtb3ZlWE1MTlMiLCJyZW1vdmVUaXRsZSIsInJlbW92ZURlc2MiLCJyZW1vdmVVc2VsZXNzRGVmcyIsInJlbW92ZUVkaXRvcnNOU0RhdGEiLCJyZW1vdmVFbXB0eUF0dHJzIiwicmVtb3ZlSGlkZGVuRWxlbXMiLCJyZW1vdmVFbXB0eVRleHQiLCJyZW1vdmVFbXB0eUNvbnRhaW5lcnMiLCJyZW1vdmVWaWV3Qm94IiwiY2xlYW51cEVuYWJsZUJhY2tncm91bmQiLCJjb252ZXJ0U3R5bGVUb0F0dHJzIiwiY29udmVydENvbG9ycyIsImNvbnZlcnRQYXRoRGF0YSIsImNvbnZlcnRUcmFuc2Zvcm0iLCJyZW1vdmVVbmtub3duc0FuZERlZmF1bHRzIiwicmVtb3ZlTm9uSW5oZXJpdGFibGVHcm91cEF0dHJzIiwicmVtb3ZlVXNlbGVzc1N0cm9rZUFuZEZpbGwiLCJyZW1vdmVVbnVzZWROUyIsImNsZWFudXBJRHMiLCJjbGVhbnVwTnVtZXJpY1ZhbHVlcyIsIm1vdmVFbGVtc0F0dHJzVG9Hcm91cCIsIm1vdmVHcm91cEF0dHJzVG9FbGVtcyIsImNvbGxhcHNlR3JvdXBzIiwicmVtb3ZlUmFzdGVySW1hZ2VzIiwibWVyZ2VQYXRocyIsImNvbnZlcnRTaGFwZVRvUGF0aCIsInNvcnRBdHRycyIsInJlbW92ZURpbWVuc2lvbnMiLCJyZW1vdmVBdHRycyIsImF0dHJzIiwicnVuIiwic291cmNlRGlyIiwiZGVzdERpciIsIm91dHB1dEZpbGVuYW1lIiwiYmVhdXRpZnlKc29uIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsIndyaXRlRmlsZVN5bmMiLCJqb2luIiwiSlNPTiIsInN0cmluZ2lmeSIsInNjYW5EaXIiLCJkaXIiLCJpY29uc0RhdGEiLCJkaXJDb250ZW50IiwicmVhZGRpclN5bmMiLCJyZXNvbHZlIiwiZW50cnkiLCJlbnRyeVBhdGgiLCJwYXJzaW5nQXJyYXkiLCJzcGxpdCIsImVudHJ5TmFtZSIsImNsZWFuIiwidG9Mb3dlckNhc2UiLCJpc0RpciIsImxzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwiaWNvbkRhdGEiLCJleHRuYW1lIiwic3ZnRGF0YSIsIm9wdGltaXplU1ZHIiwicmVhZEZpbGVTeW5jIiwibmFtZSIsInN2Z3MiLCJzb3VyY2VQYXRoIiwic2l6ZSIsImdldFZpZXdib3hTaXplIiwiZmlsZURhdGEiLCJFcnJvciIsInB1c2giLCJlcnIiLCJyZXBsYWNlIiwiUmVnRXhwIiwib3B0aW1pemVkIiwib3B0aW1pemUiLCJkYXRhIiwidmlld2JveERhdGEiLCJ3aWR0aCIsImhlaWdodCIsInBhcnNlSW50IiwidGV4dCIsImlzRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEVBQVAsTUFBZSxJQUFmO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsTUFBakI7QUFnQ0EsT0FBTyxNQUFNQyxlQUFOLENBQXNCO0FBS2xCQyxFQUFBQSxXQUFQLENBQW1CQyxNQUFuQixFQUEwQztBQUN0QyxRQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWIsQ0FBRCxJQUFvQixDQUFDRCxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiLENBQXpCLEVBQTBDO0FBQ3RDQyxNQUFBQSxNQUFNLENBQUMsa0VBQUQsRUFBcUUsSUFBckUsQ0FBTjtBQUNBQSxNQUFBQSxNQUFNLENBQUMsb0RBQUQsRUFBdUQsSUFB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T0FBTyxDQUN0QlQsS0FEZSxDQUNULFdBRFMsRUFDSSxDQURKLEVBRWZBLEtBRmUsQ0FFVCxHQUZTLEVBRUosQ0FGSSxFQUdmQSxLQUhlLENBR1QsR0FIUyxDQUFwQjtBQUlBLFVBQU0yQixLQUFLLEdBQUdELFdBQVcsQ0FBQyxDQUFELENBQXpCO0FBQ0EsVUFBTUUsTUFBTSxHQUFHRixXQUFXLENBQUMsQ0FBRCxDQUExQjtBQUVBLFdBQU8sQ0FBQ0csUUFBUSxDQUFDRixLQUFELEVBQVEsRUFBUixDQUFULEVBQXNCRSxRQUFRLENBQUNELE1BQUQsRUFBUyxFQUFULENBQTlCLENBQVA7QUFDSDs7QUF2T3dCOztBQTBPN0IsU0FBUzFGLE1BQVQsQ0FBZ0I0RixJQUFoQixFQUE4QkMsT0FBOUIsRUFBaUQ7QUFDN0MsTUFBSUEsT0FBSixFQUFhO0FBQ1Q7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWNILElBQWQ7QUFDQTtBQUNIOztBQUVELE1BQUk5RixPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiLE1BQW9CLElBQXhCLEVBQThCO0FBQzFCO0FBQ0ErRixJQUFBQSxPQUFPLENBQUNFLEdBQVIsQ0FBWUosSUFBWjtBQUNIO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IFNWR08gZnJvbSAnc3ZnbydcblxuaW50ZXJmYWNlIENvbmZpZ3VyYXRpb24ge1xuICAgIHNvdXJjZURpcjogc3RyaW5nXG4gICAgZGVzdERpcjogc3RyaW5nXG4gICAgb3V0cHV0RmlsZW5hbWU/OiBzdHJpbmdcbiAgICBiZWF1dGlmeUpzb24/OiBib29sZWFuXG4gICAgY3JlYXRlSWNvbkNvbXBvbmVudHM/OiBib29sZWFuXG59XG5cbmludGVyZmFjZSBJY29uU2l6ZSB7XG4gICAgd2lkdGg6IG51bWJlclxuICAgIGhlaWdodD86IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJY29uU2l6ZVR5cGUgPSBudW1iZXIgfCBudW1iZXJbXSB8IEljb25TaXplXG5cbmV4cG9ydCBpbnRlcmZhY2UgSWNvbkRhdGEge1xuICAgIHNpemU6IG51bWJlcltdIC8vIE5PVEU6IFRoaXMgc2hvdWxkIGJlIFtudW1iZXIsIG51bWJlcl0gYnV0IFRTIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGlzIHdoZW4gcmUtaW1wb3J0aW5nIHRoZSBnZW5lcmF0ZWQgSlNPTlxuICAgIHNvdXJjZVBhdGg6IHN0cmluZ1xuICAgIGZpbGVEYXRhOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJY29uVHlwZSB7XG4gICAgbmFtZT86IHN0cmluZ1xuICAgIHN2Z3M/OiBJY29uRGF0YVtdXG59XG5cbmludGVyZmFjZSBJY29uc0RhdGEge1xuICAgIFtrZXk6IHN0cmluZ106IEljb25UeXBlXG59XG5cbmV4cG9ydCBjbGFzcyBJY29ubHlHZW5lcmF0b3Ige1xuICAgIHByaXZhdGUgY29uZmlnOiBDb25maWd1cmF0aW9uXG4gICAgcHJpdmF0ZSBzdmdvOiBTVkdPXG4gICAgcHJpdmF0ZSBjb3VudGVyOiBudW1iZXJcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmFyZ3ZbMl0gfHwgIXByb2Nlc3MuYXJndlszXSkge1xuICAgICAgICAgICAgbG9nZ2VyKCdFUlJPUjogUGxlYXNlIHN1cHBseSBpbnB1dC0gLUFORC0gb3V0cHV0LSBkaXJlY3RvcnkgYXMgYXJndW1lbnRzJywgdHJ1ZSlcbiAgICAgICAgICAgIGxvZ2dlcigndHMtbm9kZSBpY29ubHktZ2VuZXJhdG9yLnRzIFtpbnB1dERpcl0gW291dHB1dERpcl0nLCB0cnVlKVxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvdW50ZXIgPSAwXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnXG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNyZWF0ZUljb25Db21wb25lbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXIoJ0VSUk9SOiBDcmVhdGlvbiBvZiBJY29uIGNvbXBvbmVudHMgaXMgbm90IHN1cHBvcnRlZCB5ZXQnLCB0cnVlKVxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN2Z28gPSBuZXcgU1ZHTyh7XG4gICAgICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwQXR0cnM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZURvY3R5cGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVhNTFByb2NJbnN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDb21tZW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTWV0YWRhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVhNTE5TOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVUaXRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRGVzYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVXNlbGVzc0RlZnM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVkaXRvcnNOU0RhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVtcHR5QXR0cnM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUhpZGRlbkVsZW1zOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbXB0eVRleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVtcHR5Q29udGFpbmVyczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVmlld0JveDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXBFbmFibGVCYWNrZ3JvdW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0U3R5bGVUb0F0dHJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0Q29sb3JzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aERhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnZlcnRUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVVua25vd25zQW5kRGVmYXVsdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vbkluaGVyaXRhYmxlR3JvdXBBdHRyczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVXNlbGVzc1N0cm9rZUFuZEZpbGw6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVVudXNlZE5TOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwSURzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwTnVtZXJpY1ZhbHVlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbW92ZUVsZW1zQXR0cnNUb0dyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlR3JvdXBBdHRyc1RvRWxlbXM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlR3JvdXBzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSYXN0ZXJJbWFnZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZVBhdGhzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0U2hhcGVUb1BhdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRBdHRyczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRGltZW5zaW9uczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cnM6IHsgYXR0cnM6ICcoc3Ryb2tlfGZpbGwpJyB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMucnVuKClcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJ1bigpIHtcbiAgICAgICAgY29uc3QgeyBzb3VyY2VEaXIsIGRlc3REaXIsIG91dHB1dEZpbGVuYW1lLCBiZWF1dGlmeUpzb24gfSA9IHRoaXMuY29uZmlnXG5cbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGRlc3REaXIpKSB7XG4gICAgICAgICAgICBmcy5ta2RpclN5bmMoZGVzdERpcilcbiAgICAgICAgfVxuXG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICAgICAgICBwYXRoLmpvaW4oYCR7ZGVzdERpcn0vJHtvdXRwdXRGaWxlbmFtZSA/IG91dHB1dEZpbGVuYW1lIDogJ2ljb25seURhdGEnfS5qc29uYCksXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShhd2FpdCB0aGlzLnNjYW5EaXIoc291cmNlRGlyKSwgbnVsbCwgYmVhdXRpZnlKc29uID8gNCA6IDApXG4gICAgICAgIClcblxuICAgICAgICBsb2dnZXIoXG4gICAgICAgICAgICBgSWNvbmx5IEdlbmVyYXRvciBleHBvcnRlZCAke3RoaXMuY291bnRlcn0gU1ZHJ3MgaW50byBbJHt0aGlzLmNvbmZpZy5kZXN0RGlyfS8ke1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm91dHB1dEZpbGVuYW1lID8gdGhpcy5jb25maWcub3V0cHV0RmlsZW5hbWUgOiAnaWNvbmx5RGF0YSdcbiAgICAgICAgICAgIH0uanNvbl1gXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNjYW5EaXIoZGlyOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaWNvbnNEYXRhOiBJY29uc0RhdGEgPSB7fVxuICAgICAgICBjb25zdCBkaXJDb250ZW50ID0gZnMucmVhZGRpclN5bmMocGF0aC5yZXNvbHZlKGRpcikpXG5cbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBkaXJDb250ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBlbnRyeVBhdGggPSBgJHtkaXJ9LyR7ZW50cnl9YFxuICAgICAgICAgICAgY29uc3QgcGFyc2luZ0FycmF5ID0gZW50cnkuc3BsaXQoJ18nKVxuICAgICAgICAgICAgY29uc3QgZW50cnlOYW1lID0gdGhpcy5jbGVhbihwYXJzaW5nQXJyYXlbMF0udG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgIGNvbnN0IGlzRGlyID0gZnMubHN0YXRTeW5jKGVudHJ5UGF0aCkuaXNEaXJlY3RvcnkoKVxuXG4gICAgICAgICAgICBpZiAoaXNEaXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpY29uRGF0YSA9IGF3YWl0IHRoaXMuc2NhbkRpcihlbnRyeVBhdGgpXG5cbiAgICAgICAgICAgICAgICBpZiAoIWljb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcihgQ291bGRuJ3QgZ2V0IGRhdGEgZm9yICR7ZW50cnlQYXRofWApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLmV4aXQoMSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpY29uc0RhdGFbYCR7ZW50cnlOYW1lfUdyb3VwYF0gPSBpY29uRGF0YVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXRoLmV4dG5hbWUoZW50cnkpID09PSAnLnN2ZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdmdEYXRhID0gYXdhaXQgdGhpcy5vcHRpbWl6ZVNWRyhmcy5yZWFkRmlsZVN5bmMoZW50cnlQYXRoLCAndXRmOCcpKVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpY29uc0RhdGFbZW50cnlOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBpY29uc0RhdGFbZW50cnlOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGVudHJ5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Z3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg6IGVudHJ5UGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5nZXRWaWV3Ym94U2l6ZShzdmdEYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZURhdGE6IHN2Z0RhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyKytcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNvbkRhdGEgPSBpY29uc0RhdGFbZW50cnlOYW1lXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWljb25EYXRhIHx8ICFpY29uRGF0YS5zdmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGVtcHR5IGRhdGEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uRGF0YS5zdmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg6IGVudHJ5UGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiB0aGlzLmdldFZpZXdib3hTaXplKHN2Z0RhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVEYXRhOiBzdmdEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRlcisrXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWNvbnNEYXRhXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhbihwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhcbiAgICAgICAgICAgIC5yZXBsYWNlKHRoaXMuY29uZmlnLnNvdXJjZURpciwgJycpXG4gICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCcvJywgJ2cnKSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCcgJywgJ2cnKSwgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2UoJy5zdmcnLCAnJylcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9wdGltaXplU1ZHKHN2Z0RhdGE6IHN0cmluZykge1xuICAgICAgICBjb25zdCBvcHRpbWl6ZWQgPSBhd2FpdCB0aGlzLnN2Z28ub3B0aW1pemUoc3ZnRGF0YSlcbiAgICAgICAgcmV0dXJuIG9wdGltaXplZC5kYXRhXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRWaWV3Ym94U2l6ZShzdmdEYXRhOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgdmlld2JveERhdGEgPSBzdmdEYXRhXG4gICAgICAgICAgICAuc3BsaXQoJ3ZpZXdCb3g9XCInKVsxXVxuICAgICAgICAgICAgLnNwbGl0KCdcIicpWzBdXG4gICAgICAgICAgICAuc3BsaXQoJyAnKVxuICAgICAgICBjb25zdCB3aWR0aCA9IHZpZXdib3hEYXRhWzJdXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHZpZXdib3hEYXRhWzNdXG5cbiAgICAgICAgcmV0dXJuIFtwYXJzZUludCh3aWR0aCwgMTApLCBwYXJzZUludChoZWlnaHQsIDEwKV1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvZ2dlcih0ZXh0OiBzdHJpbmcsIGlzRXJyb3I/OiBib29sZWFuKSB7XG4gICAgaWYgKGlzRXJyb3IpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcih0ZXh0KVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5hcmd2WzRdID09PSAnLXYnKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKHRleHQpXG4gICAgfVxufVxuIl19